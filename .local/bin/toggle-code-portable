#!/bin/bash
set -euo pipefail
CACHE_DIR="$HOME/.cache/niri-toggle-app"
CACHE_FILE="$CACHE_DIR/code-portable.id"
mkdir -p "$CACHE_DIR"

get_ids() {
    # Match both upstream Code and the Wayland app-id we set for the portable build
    niri msg windows | awk '
        /^Window ID/ {id=$3; sub(":","",id)}
        /  App ID: "Code"/ {print id}
        /  App ID: "code-portable"/ {print id}
    '
}

focus() {
    niri msg action focus-window --id "$1"
}

# reuse cached id if valid
if [ -f "$CACHE_FILE" ]; then
    cached_id=$(cat "$CACHE_FILE")
    if [ -n "$cached_id" ] && niri msg windows | grep -q "^Window ID $cached_id"; then
        focus "$cached_id"
        exit 0
    fi
fi

mapfile -t before < <(get_ids)
before_sorted=($(printf '%s
' "${before[@]}" | sort -u))

~/.local/bin/code-portable &>/dev/null &

for _ in {1..50}; do
    sleep 0.2
    mapfile -t after < <(get_ids)
    after_sorted=($(printf '%s
' "${after[@]}" | sort -u))
    if [ ${#after_sorted[@]} -gt ${#before_sorted[@]} ]; then
        # find new ids
        for id in "${after_sorted[@]}"; do
            skip=false
            for existing in "${before_sorted[@]}"; do
                if [ "$id" = "$existing" ]; then
                    skip=true
                    break
                fi
            done
            if ! $skip; then
                echo "$id" > "$CACHE_FILE"
                focus "$id"
                exit 0
            fi
        done
    fi
    if [ ${#after_sorted[@]} -gt 0 ]; then
        latest=${after_sorted[-1]}
        echo "$latest" > "$CACHE_FILE"
        focus "$latest"
        exit 0
    fi
    before_sorted=("${after_sorted[@]}")
done

echo "Failed to focus code-portable" >&2
exit 1
